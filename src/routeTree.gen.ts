/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TestimoniesIndexRouteImport } from './routes/testimonies/index'
import { Route as PlayIndexRouteImport } from './routes/play/index'
import { Route as MicroInfrastructureIndexRouteImport } from './routes/micro-infrastructure/index'
import { Route as MapIndexRouteImport } from './routes/map/index'
import { Route as ExploreIndexRouteImport } from './routes/explore/index'
import { Route as BenefitsIndexRouteImport } from './routes/benefits/index'
import { Route as MapPhase2RouteImport } from './routes/map/phase-2'
import { Route as MapPhase1RouteImport } from './routes/map/phase-1'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TestimoniesIndexRoute = TestimoniesIndexRouteImport.update({
  id: '/testimonies/',
  path: '/testimonies/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlayIndexRoute = PlayIndexRouteImport.update({
  id: '/play/',
  path: '/play/',
  getParentRoute: () => rootRouteImport,
} as any)
const MicroInfrastructureIndexRoute =
  MicroInfrastructureIndexRouteImport.update({
    id: '/micro-infrastructure/',
    path: '/micro-infrastructure/',
    getParentRoute: () => rootRouteImport,
  } as any)
const MapIndexRoute = MapIndexRouteImport.update({
  id: '/map/',
  path: '/map/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExploreIndexRoute = ExploreIndexRouteImport.update({
  id: '/explore/',
  path: '/explore/',
  getParentRoute: () => rootRouteImport,
} as any)
const BenefitsIndexRoute = BenefitsIndexRouteImport.update({
  id: '/benefits/',
  path: '/benefits/',
  getParentRoute: () => rootRouteImport,
} as any)
const MapPhase2Route = MapPhase2RouteImport.update({
  id: '/map/phase-2',
  path: '/map/phase-2',
  getParentRoute: () => rootRouteImport,
} as any)
const MapPhase1Route = MapPhase1RouteImport.update({
  id: '/map/phase-1',
  path: '/map/phase-1',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/map/phase-1': typeof MapPhase1Route
  '/map/phase-2': typeof MapPhase2Route
  '/benefits': typeof BenefitsIndexRoute
  '/explore': typeof ExploreIndexRoute
  '/map': typeof MapIndexRoute
  '/micro-infrastructure': typeof MicroInfrastructureIndexRoute
  '/play': typeof PlayIndexRoute
  '/testimonies': typeof TestimoniesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/map/phase-1': typeof MapPhase1Route
  '/map/phase-2': typeof MapPhase2Route
  '/benefits': typeof BenefitsIndexRoute
  '/explore': typeof ExploreIndexRoute
  '/map': typeof MapIndexRoute
  '/micro-infrastructure': typeof MicroInfrastructureIndexRoute
  '/play': typeof PlayIndexRoute
  '/testimonies': typeof TestimoniesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/map/phase-1': typeof MapPhase1Route
  '/map/phase-2': typeof MapPhase2Route
  '/benefits/': typeof BenefitsIndexRoute
  '/explore/': typeof ExploreIndexRoute
  '/map/': typeof MapIndexRoute
  '/micro-infrastructure/': typeof MicroInfrastructureIndexRoute
  '/play/': typeof PlayIndexRoute
  '/testimonies/': typeof TestimoniesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/map/phase-1'
    | '/map/phase-2'
    | '/benefits'
    | '/explore'
    | '/map'
    | '/micro-infrastructure'
    | '/play'
    | '/testimonies'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/map/phase-1'
    | '/map/phase-2'
    | '/benefits'
    | '/explore'
    | '/map'
    | '/micro-infrastructure'
    | '/play'
    | '/testimonies'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/map/phase-1'
    | '/map/phase-2'
    | '/benefits/'
    | '/explore/'
    | '/map/'
    | '/micro-infrastructure/'
    | '/play/'
    | '/testimonies/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  MapPhase1Route: typeof MapPhase1Route
  MapPhase2Route: typeof MapPhase2Route
  BenefitsIndexRoute: typeof BenefitsIndexRoute
  ExploreIndexRoute: typeof ExploreIndexRoute
  MapIndexRoute: typeof MapIndexRoute
  MicroInfrastructureIndexRoute: typeof MicroInfrastructureIndexRoute
  PlayIndexRoute: typeof PlayIndexRoute
  TestimoniesIndexRoute: typeof TestimoniesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/testimonies/': {
      id: '/testimonies/'
      path: '/testimonies'
      fullPath: '/testimonies'
      preLoaderRoute: typeof TestimoniesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/play/': {
      id: '/play/'
      path: '/play'
      fullPath: '/play'
      preLoaderRoute: typeof PlayIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/micro-infrastructure/': {
      id: '/micro-infrastructure/'
      path: '/micro-infrastructure'
      fullPath: '/micro-infrastructure'
      preLoaderRoute: typeof MicroInfrastructureIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map/': {
      id: '/map/'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore/': {
      id: '/explore/'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/benefits/': {
      id: '/benefits/'
      path: '/benefits'
      fullPath: '/benefits'
      preLoaderRoute: typeof BenefitsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map/phase-2': {
      id: '/map/phase-2'
      path: '/map/phase-2'
      fullPath: '/map/phase-2'
      preLoaderRoute: typeof MapPhase2RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map/phase-1': {
      id: '/map/phase-1'
      path: '/map/phase-1'
      fullPath: '/map/phase-1'
      preLoaderRoute: typeof MapPhase1RouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  MapPhase1Route: MapPhase1Route,
  MapPhase2Route: MapPhase2Route,
  BenefitsIndexRoute: BenefitsIndexRoute,
  ExploreIndexRoute: ExploreIndexRoute,
  MapIndexRoute: MapIndexRoute,
  MicroInfrastructureIndexRoute: MicroInfrastructureIndexRoute,
  PlayIndexRoute: PlayIndexRoute,
  TestimoniesIndexRoute: TestimoniesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
